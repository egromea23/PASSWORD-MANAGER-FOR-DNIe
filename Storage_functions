import json
from pathlib import Path
from cryptography.fernet import Fernet
import string, random

# ==================== Directorios ====================
METADATA_DIR = Path("metadata")
PASSWORDS_DIR = Path("passwords")
ENTRIES_DIR = PASSWORDS_DIR / "entries_files"

METADATA_DIR.mkdir(exist_ok=True)
PASSWORDS_DIR.mkdir(exist_ok=True)
ENTRIES_DIR.mkdir(exist_ok=True)

DB_PATH = PASSWORDS_DIR / "passwords.db"
META_PATH = METADATA_DIR / "metadata.json"

# ==================== Funciones DB ====================
def generate_k_db():
    return Fernet.generate_key()

def init_empty_db(k_db: bytes):
    db = {"entries": []}
    ciphertext = encrypt_db(k_db, db)
    write_encrypted_db(ciphertext)

def encrypt_db(k_db: bytes, db: dict) -> bytes:
    f = Fernet(k_db)
    data = json.dumps(db, ensure_ascii=False).encode()
    return f.encrypt(data)

def decrypt_db(k_db: bytes, ciphertext: bytes) -> dict:
    f = Fernet(k_db)
    return json.loads(f.decrypt(ciphertext).decode())

def read_encrypted_db() -> bytes:
    if not DB_PATH.exists():
        return b""
    return DB_PATH.read_bytes()

def write_encrypted_db(ciphertext: bytes):
    DB_PATH.write_bytes(ciphertext)

def read_metadata() -> dict:
    if not META_PATH.exists():
        return {}
    return json.loads(META_PATH.read_text())

def update_metadata(meta: dict):
    META_PATH.write_text(json.dumps(meta, ensure_ascii=False))

import json
from pathlib import Path

TEMP_DB_PATH = Path("passwords/temp_db.json")

def save_json_db(k_db_json):
    TEMP_DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    with open(TEMP_DB_PATH, "w", encoding="utf-8") as f:
        json.dump(k_db_json, f, indent=2, ensure_ascii=False)

def load_json_db():
    if not TEMP_DB_PATH.exists():
        return []
    with open(TEMP_DB_PATH, "r", encoding="utf-8") as f:
        return json.load(f)
    
def get_next_id(db_json):
    """Devuelve el siguiente ID disponible (1, 2, 3, â€¦)."""
    if not db_json:
        return 1
    return max(entry["id"] for entry in db_json) + 1
